diff --git a/src/main/java/mimc/MigratePlugin.java b/src/main/java/mimc/MigratePlugin.java
new file mode 100644
index 00000000..41af945e
--- /dev/null
+++ b/src/main/java/mimc/MigratePlugin.java
@@ -0,0 +1,74 @@
+package mimc;
+
+import com.google.common.io.ByteArrayDataInput;
+import com.google.common.io.ByteStreams;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.bukkit.plugin.messaging.PluginMessageListener;
+
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+
+import static net.minecraft.server.MinecraftServer.LOGGER;
+
+public class MigratePlugin extends JavaPlugin implements PluginMessageListener {
+    void checkIfBungee() {
+        // we check if the server is Spigot/Paper (because of the spigot.yml file)
+        if ( !getServer().getVersion().contains( "Spigot" ) || !getServer().getVersion().contains( "Paper" ) )
+        {
+            LOGGER.error( "You probably run CraftBukkit... Please update atleast to spigot for this to work..." );
+            LOGGER.error( "Plugin disabled!" );
+            getServer().getPluginManager().disablePlugin( this );
+            return;
+        }
+        if ( getServer().spigot().getConfig().getBoolean( "settings.bungeecord" ) )
+        {
+            LOGGER.error( "This server is not BungeeCord." );
+            LOGGER.error( "If the server is already hooked to BungeeCord, please enable it into your spigot.yml aswell." );
+            LOGGER.error( "Plugin disabled!" );
+            getServer().getPluginManager().disablePlugin( this );
+        }
+    }
+
+    @Override
+    public void onEnable() {
+        checkIfBungee();
+        this.getServer().getMessenger().registerIncomingPluginChannel(this, "mimc", this);
+        LOGGER.warn("MIMC | MigratePlugin enabled successfully.");
+    }
+
+    @Override
+    public void onDisable() {
+        LOGGER.warn("MIMC | MigratePlugin was disabled!");
+    }
+
+    @Override
+    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
+        if (!channel.equalsIgnoreCase("mimc")) {
+            return;
+        }
+
+        LOGGER.warn(String.format( "MIMC | Got a message over the MIMC channel" ));
+
+        ByteArrayDataInput in = ByteStreams.newDataInput(message);
+        String subchannel = in.readUTF();
+
+        try {
+            if (subchannel.equalsIgnoreCase("Migrate")) {
+                short len = in.readShort();
+                byte[] msgbytes = new byte[len];
+                in.readFully(msgbytes);
+
+                DataInputStream msgin = new DataInputStream(new ByteArrayInputStream(msgbytes));
+
+                String serverName = msgin.readUTF();
+                String playerName = msgin.readUTF();
+
+                LOGGER.warn(String.format( "MIMC | Migration request received for player %s to node %s", playerName, serverName ));
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3dbe83c7..02ca1552 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -16,6 +16,7 @@ import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import java.awt.GraphicsEnvironment;
+
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.IOException;
@@ -45,6 +46,7 @@ import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
 import joptsimple.NonOptionArgumentSpec;
 import joptsimple.OptionParser;
+
 import joptsimple.OptionSet;
 import joptsimple.OptionSpec;
 import org.apache.commons.lang3.Validate;
@@ -660,6 +662,8 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     public abstract boolean k();
 
     public boolean saveChunks(boolean flag, boolean flag1, boolean flag2) {
+        LOGGER.warn("MIMC | Running MinecraftServer::saveChunks()");
+
         boolean flag3 = false;
 
         for (Iterator iterator = this.getWorlds().iterator(); iterator.hasNext(); flag3 = true) {
@@ -681,6 +685,14 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         worldserver1.getWorldBorder().a(worlddata);
         worlddata.c(this.getBossBattleCustomData().c());
         worldserver1.getDataManager().saveWorldData(worlddata, this.getPlayerList().r());
+
+        // MIMC Start
+        if (flag2) {
+            worldserver.isMigrating = true;
+            MinecraftServer.LOGGER.warn("MIMC | isMigrating set to true");
+        }
+        // MIMC End
+
         } // CraftBukkit - moved down
         return flag3;
     }
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 86831c35..ce58ffc0 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -1150,6 +1150,18 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         });
     }
 
+    // MIMC start
+    @Override
+    public void write(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) throws IOException {
+//        LOGGER.info("MIMC | Running PlayerChunkMap::write()");
+        if (this.world.isMigrating) {
+            LOGGER.info("MIMC | isMigrating so skipping PlayerChunkMap::write()");
+            return;
+        }
+        super.write(chunkcoordintpair, nbttagcompound);
+    }
+    // MIMC end
+
     public class EntityTracker {
 
         private final EntityTrackerEntry trackerEntry;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index a0b64480..15daa530 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1221,6 +1221,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         this.A = this.e;
         this.player.setLocation(d0, d1, d2, f, f1);
+        // MIMC start
+        this.minecraftServer.LOGGER.warn("MIMC | Saving players after teleport and before communicating back to BungeeCord");
+        this.minecraftServer.getPlayerList().savePlayers();
+        // MIMC end
         this.player.playerConnection.sendPacket(new PacketPlayOutPosition(d0 - d3, d1 - d4, d2 - d5, f - f2, f1 - f3, set, this.teleportAwait));
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index 551376ff..99e503a7 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -98,6 +98,8 @@ public class WorldNBTStorage implements IPlayerFileData {
     }
 
     public void saveWorldData(WorldData worlddata, @Nullable NBTTagCompound nbttagcompound) {
+//        LOGGER.info("MIMC | Writing WorldNBTStorage::saveWorldData()");
+
         worlddata.d(19133);
         NBTTagCompound nbttagcompound1 = worlddata.a(nbttagcompound);
         NBTTagCompound nbttagcompound2 = new NBTTagCompound();
@@ -105,6 +107,13 @@ public class WorldNBTStorage implements IPlayerFileData {
         nbttagcompound2.set("Data", nbttagcompound1);
 
         try {
+            // MIMC start
+            if (worlddata.world != null && worlddata.world.isMigrating) {
+                LOGGER.info("MIMC | isMigrating so skipping WorldNBTStorage::saveWorldData()");
+                return;
+            }
+            // MIMC end
+
             File file = new File(this.baseDir, "level.dat_new");
             File file1 = new File(this.baseDir, "level.dat_old");
             File file2 = new File(this.baseDir, "level.dat");
@@ -132,6 +141,7 @@ public class WorldNBTStorage implements IPlayerFileData {
     private void h() {
         try {
             File file = new File(this.baseDir, "session.lock");
+            LOGGER.info("MIMC | Writing session.lock");
             DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(file));
 
             try {
@@ -199,6 +209,7 @@ public class WorldNBTStorage implements IPlayerFileData {
             File file = new File(this.playerDir, entityhuman.getUniqueIDString() + ".dat.tmp");
             File file1 = new File(this.playerDir, entityhuman.getUniqueIDString() + ".dat");
 
+            LOGGER.info("MIMC | Writing save(EntityHuman entityhuman)");
             NBTCompressedStreamTools.a(nbttagcompound, (OutputStream) (new FileOutputStream(file)));
             if (file1.exists()) {
                 file1.delete();
@@ -327,6 +338,7 @@ public class WorldNBTStorage implements IPlayerFileData {
         uuid = UUID.randomUUID();
         DataOutputStream dos = null;
         try {
+            LOGGER.info("MIMC | Writing getUUID()");
             dos = new DataOutputStream(new FileOutputStream(file1));
             dos.writeLong(uuid.getMostSignificantBits());
             dos.writeLong(uuid.getLeastSignificantBits());
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 135ec94c..98427c9d 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -68,6 +68,10 @@ public class WorldServer extends World {
     @Nullable
     private final MobSpawnerTrader mobSpawnerTrader;
 
+    // MIMC start
+    public boolean isMigrating;
+    // MIMC end
+
     // CraftBukkit start
     private int tickPosition;
     boolean hasPhysicsEvent = true; // Paper
