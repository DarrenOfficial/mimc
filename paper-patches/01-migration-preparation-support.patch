diff --git a/pom.xml b/pom.xml
index beda5dc8..e719fe93 100644
--- a/pom.xml
+++ b/pom.xml
@@ -256,10 +256,10 @@
                                         <exclude>org.bukkit.craftbukkit.Main*</exclude>
                                     </excludes>
                                 </relocation>
-                                <relocation>
-                                    <pattern>net.minecraft.server</pattern>
-                                    <shadedPattern>net.minecraft.server.v${minecraft_version}</shadedPattern>
-                                </relocation>
+<!--                                <relocation>-->
+<!--                                    <pattern>net.minecraft.server</pattern>-->
+<!--                                    <shadedPattern>net.minecraft.server.v${minecraft_version}</shadedPattern>-->
+<!--                                </relocation>-->
                             </relocations>
                             <transformers>
                                 <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 6eef4592..ad98a18b 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -698,6 +698,23 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         return flag3;
     }
 
+    // MIMC start
+    public boolean preparePlayerForMigration(String playerName) {
+        LOGGER.warn("MIMC | Running MinecraftServer::preparePlayerForMigration()");
+
+        getPlayerList().savePlayers();
+        saveChunks(true, true, true);
+
+        Iterator iterator = this.getWorlds().iterator();
+        while(iterator.hasNext()) {
+            WorldServer worldserver = (WorldServer) iterator.next();
+            worldserver.isMigrating = true;
+        }
+
+        return true;
+    }
+    // MIMC end
+
     @Override
     public void close() {
         this.stop();
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index fd0d2b6e..dc59b3f8 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -791,6 +791,17 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         }
     }
 
+    // MIMC start
+    @Override
+    public void write(ChunkCoordIntPair chunkcoordintpair, NBTTagCompound nbttagcompound) throws IOException {
+        if (this.world.isMigrating) {
+            //LOGGER.info("MIMC | isMigrating so skipping PlayerChunkMap::write()");
+            return;
+        }
+        super.write(chunkcoordintpair, nbttagcompound);
+    }
+    // MIMC end
+
     protected void setViewDistance(int i) {
         int j = MathHelper.clamp(i + 1, 3, 33);
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index e7b8b2e9..f36ae899 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1227,6 +1227,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         this.A = this.e;
         this.player.setLocation(d0, d1, d2, f, f1);
+
+        // MIMC start
+        this.minecraftServer.LOGGER.warn("MIMC | Saving players after teleport and before communicating back to BungeeCord");
+        this.minecraftServer.getPlayerList().savePlayers();
+        // MIMC end
+
         this.player.playerConnection.sendPacket(new PacketPlayOutPosition(d0 - d3, d1 - d4, d2 - d5, f - f2, f1 - f3, set, this.teleportAwait));
     }
 
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index d2b32894..c32e08af 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -11,6 +11,7 @@ import javax.annotation.Nullable;
 import com.destroystokyo.paper.PaperConfig; // Paper
 
 import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.io.LoggerReader;
 
 public abstract class RegionFileCache implements AutoCloseable {
 
@@ -61,6 +62,9 @@ public abstract class RegionFileCache implements AutoCloseable {
         if (regionfile != null) {
             return regionfile;
         } else {
+            String fileName = "r." + chunkcoordintpair.getRegionX() + "." + chunkcoordintpair.getRegionZ() + ".mca";
+            MinecraftServer.LOGGER.warn(String.format("Loading %s", fileName) );
+
             if (this.cache.size() >= PaperConfig.regionFileCacheSize) { // Paper - configurable
                 ((RegionFile) this.cache.removeLast()).close();
             }
@@ -70,6 +74,7 @@ public abstract class RegionFileCache implements AutoCloseable {
             }
 
             copyIfNeeded(chunkcoordintpair.x, chunkcoordintpair.z); // Paper
+
             File file = new File(this.a, "r." + chunkcoordintpair.getRegionX() + "." + chunkcoordintpair.getRegionZ() + ".mca");
             if (existingOnly && !file.exists()) return null; // CraftBukkit
             RegionFile regionfile1 = new RegionFile(file);
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index eaae4468..1eb5a4d3 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -105,6 +105,12 @@ public class WorldNBTStorage implements IPlayerFileData {
         nbttagcompound2.set("Data", nbttagcompound1);
 
         try {
+            // MIMC start
+            if (worlddata.world != null && worlddata.world.isMigrating) {
+                return;
+            }
+            // MIMC end
+
             File file = new File(this.baseDir, "level.dat_new");
             File file1 = new File(this.baseDir, "level.dat_old");
             File file2 = new File(this.baseDir, "level.dat");
@@ -151,21 +157,24 @@ public class WorldNBTStorage implements IPlayerFileData {
     }
 
     public void checkSession() throws ExceptionWorldConflict {
-        try {
-            File file = new File(this.baseDir, "session.lock");
-            DataInputStream datainputstream = new DataInputStream(new FileInputStream(file));
-
-            try {
-                if (datainputstream.readLong() != this.sessionId) {
-                    throw new ExceptionWorldConflict("The save for world located at " + this.baseDir + " is being accessed from another location, aborting");  // Spigot
-                }
-            } finally {
-                datainputstream.close();
-            }
-
-        } catch (IOException ioexception) {
-            throw new ExceptionWorldConflict("Failed to check session lock for world located at " + this.baseDir + ", aborting. Stop the server and delete the session.lock in this world to prevent further issues."); // Spigot
-        }
+        // MIMC: Disable this check to enable multiple instances dealing with the same world concurrently
+        return;
+
+//        try {
+//            File file = new File(this.baseDir, "session.lock");
+//            DataInputStream datainputstream = new DataInputStream(new FileInputStream(file));
+//
+//            try {
+//                if (datainputstream.readLong() != this.sessionId) {
+//                    throw new ExceptionWorldConflict("The save for world located at " + this.baseDir + " is being accessed from another location, aborting");  // Spigot
+//                }
+//            } finally {
+//                datainputstream.close();
+//            }
+//
+//        } catch (IOException ioexception) {
+//            throw new ExceptionWorldConflict("Failed to check session lock for world located at " + this.baseDir + ", aborting. Stop the server and delete the session.lock in this world to prevent further issues."); // Spigot
+//        }
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 451ad4f3..a43e0b63 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -71,6 +71,10 @@ public class WorldServer extends World {
     @Nullable
     private final MobSpawnerTrader mobSpawnerTrader;
 
+    // MIMC start
+    public boolean isMigrating;
+    // MIMC end
+
     // CraftBukkit start
     private int tickPosition;
     boolean hasPhysicsEvent = true; // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 05886414..882f984d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -41,6 +41,8 @@ import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.imageio.ImageIO;
+
+import mimc.MimcServer;
 import net.minecraft.server.Advancement;
 import net.minecraft.server.ArgumentEntity;
 import net.minecraft.server.Block;
@@ -199,7 +201,7 @@ import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
-public final class CraftServer implements Server {
+public final class CraftServer implements MimcServer {
     private final String serverName = "Paper"; // Paper
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
@@ -2161,4 +2163,11 @@ public final class CraftServer implements Server {
         return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, name);
     }
     // Paper end
+
+    // MIMC start
+    @Override
+    public boolean preparePlayerForMigration(String playerName) {
+        return this.console.preparePlayerForMigration(playerName);
+    }
+    // MIMC end
 }
