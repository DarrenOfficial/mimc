diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index b4e17bec..3f831280 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -221,7 +221,6 @@ public class BungeeCord extends ProxyServer
         getPluginManager().registerCommand( null, new CommandIP() );
         getPluginManager().registerCommand( null, new CommandBungee() );
         getPluginManager().registerCommand( null, new CommandPerms() );
-        getPluginManager().registerCommand( null, new CommandHop() );
 
         if ( !Boolean.getBoolean( "net.md_5.bungee.native.disable" ) )
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandHop.java b/proxy/src/main/java/net/md_5/bungee/command/CommandHop.java
deleted file mode 100644
index ebf138f1..00000000
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandHop.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package net.md_5.bungee.command;
-
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.CommandSender;
-import net.md_5.bungee.api.ProxyServer;
-import net.md_5.bungee.api.chat.ComponentBuilder;
-import net.md_5.bungee.api.config.ServerInfo;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.api.plugin.Command;
-
-public class CommandHop extends Command {
-    public CommandHop() {
-        super("hop");
-    }
-
-    @Override
-    public void execute(CommandSender sender, String[] args) {
-        if (!(sender instanceof ProxiedPlayer)) {
-            sender.sendMessage(new ComponentBuilder("This command can only be run by a player!").color(ChatColor.RED).create());
-            return;
-        }
-        ProxiedPlayer player = (ProxiedPlayer) sender;
-
-        String serverName = player.getServer().getInfo().getName().equalsIgnoreCase("spawn")
-                ? "s1" : "spawn";
-        ServerInfo target = ProxyServer.getInstance().getServerInfo(serverName);
-        player.connect(target);
-    }
-}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 4d96e797..886ab1c2 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -162,6 +162,7 @@ public class DownstreamBridge extends PacketHandler
         int readerIndex = packet.buf.readerIndex();
         int packetId = DefinedPacket.readVarInt( packet.buf );
         // https://wiki.vg/Pre-release_protocol for current packetids
+        // See EnumProtocol in Paper for more info
         String packetName = null;
         switch (packetId) {
             //case 0x00: packetName = "PacketPlayOutSpawnEntity"; break;
@@ -190,7 +191,7 @@ public class DownstreamBridge extends PacketHandler
             //case 0x17: packetName = "PacketPlayOutSetCooldown"; break;
             //case 0x18: packetName = "PacketPlayOutPluginMessage"; break;
             //case 0x19: packetName = "PacketPlayOutNamedSoundEffect"; break;
-            case 0x1A: packetName = "PacketPlayOutDisconnect"; break;
+            //case 0x1A: packetName = "PacketPlayOutDisconnect"; break;
             //case 0x1B: packetName = "PacketPlayOutEntityStatus"; break;
             //case 0x1C: packetName = "PacketPlayOutExplosion"; break;
             //case 0x1D: packetName = "PacketPlayOutUnloadChunk"; break;
@@ -225,7 +226,7 @@ public class DownstreamBridge extends PacketHandler
             //case 0x37: packetName = "PacketPlayOutEntityDestroy"; break;
             //case 0x38: packetName = "PacketPlayOutRemoveEntityEffect"; break;
             //case 0x39: packetName = "PacketPlayOutResourcePackSend"; break;
-            case 0x3A: packetName = "PacketPlayOutRespawn"; break;
+            //case 0x3A: packetName = "PacketPlayOutRespawn"; break;
             //case 0x3B: packetName = "PacketPlayOutEntityHeadRotation"; break;
             //case 0x3C: packetName = "PacketPlayOutSelectAdvancementTab"; break;
             //case 0x3D: packetName = "PacketPlayOutWorldBorder"; break;
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/Partition.java b/proxy/src/main/java/net/md_5/bungee/mimc/Partition.java
index f1ae3dfa..ef26bdd4 100644
--- a/proxy/src/main/java/net/md_5/bungee/mimc/Partition.java
+++ b/proxy/src/main/java/net/md_5/bungee/mimc/Partition.java
@@ -1,5 +1,7 @@
 package net.md_5.bungee.mimc;
 
+import com.google.common.io.ByteArrayDataOutput;
+import com.google.common.io.ByteStreams;
 import net.md_5.bungee.api.config.ServerInfo;
 
 import java.util.ArrayList;
@@ -7,7 +9,7 @@ import java.util.List;
 import java.util.Map;
 
 public class Partition {
-    public final long MERGE_RADIUS = 32 * 16;
+    public final long MERGE_RADIUS = 2 * 32 * 16; // 2 Region files radius
 
     private String serverName;
     private final List<Player> players = new ArrayList<>();
@@ -21,7 +23,7 @@ public class Partition {
 
     public boolean isInMergeRadius(Player player) {
         if (isSpawnPartition) {
-            if (player.location.distance(new PlayerLocation(Dimension.OVERWORLD, 0, 70, 0)) <= 1000) {
+            if (player.location.distance(new PlayerLocation(Dimension.OVERWORLD, 0, 70, 0)) <= 1024) {
                 return true;
             }
         }
@@ -36,14 +38,31 @@ public class Partition {
         this.players.add(player);
     }
 
+    public void remove(Player player) {
+        this.players.remove(player);
+    }
+
     public void mergeInto(Partition other, Map<String, ServerInfo> servers) {
-        players.addAll(other.players);
-        for (Player p : other.players) {
-            p.userCon.connect(servers.get(serverName));
+        for (int i=other.players.size()-1;i>-1;i--) {
+            Player p = other.players.get(i);
+            p.migrateTo(this);
+            sendMigrationMessage(p, servers);
         }
     }
-
     public void migrate(Player p, Map<String, ServerInfo> servers) {
+        p.migrateTo(this);
+        sendMigrationMessage(p, servers);
+    }
+
+    void sendMigrationMessage(Player p, Map<String, ServerInfo> servers) {
+        ByteArrayDataOutput out = ByteStreams.newDataOutput();
+        out.writeUTF( "Migrate" );
+        ServerInfo sourceServer = p.userCon.getServer().getInfo();
+
+        out.writeUTF( serverName );
+        out.writeUTF( p.name );
+
+        sourceServer.sendData("mimc", out.toByteArray());
         p.userCon.connect(servers.get(serverName));
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/Player.java b/proxy/src/main/java/net/md_5/bungee/mimc/Player.java
index f1792ac2..1c61797a 100644
--- a/proxy/src/main/java/net/md_5/bungee/mimc/Player.java
+++ b/proxy/src/main/java/net/md_5/bungee/mimc/Player.java
@@ -37,4 +37,11 @@ public class Player {
     public String toString() {
         return String.format("Player %s [UniqueId:%s]", name, uniqueId);
     }
+
+    public void migrateTo(Partition partition) {
+        Partition previous = this.partition;
+        previous.remove(this);
+        partition.add(this);
+        this.partition = partition;
+    }
 }
