diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index 1c9fd8e9..d44ac67e 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -314,4 +314,5 @@ public abstract class ProxyServer
      * @see Title
      */
     public abstract Title createTitle();
+
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 343f9d29..8acdc22d 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -71,12 +71,16 @@ import net.md_5.bungee.chat.ScoreComponentSerializer;
 import net.md_5.bungee.chat.SelectorComponentSerializer;
 import net.md_5.bungee.chat.TextComponentSerializer;
 import net.md_5.bungee.chat.TranslatableComponentSerializer;
-import net.md_5.bungee.command.*;
+import net.md_5.bungee.command.CommandBungee;
+import net.md_5.bungee.command.CommandEnd;
+import net.md_5.bungee.command.CommandIP;
+import net.md_5.bungee.command.CommandPerms;
+import net.md_5.bungee.command.CommandReload;
+import net.md_5.bungee.command.ConsoleCommandSender;
 import net.md_5.bungee.compress.CompressFactory;
 import net.md_5.bungee.conf.Configuration;
 import net.md_5.bungee.conf.YamlConfig;
 import net.md_5.bungee.forge.ForgeConstants;
-import net.md_5.bungee.mimc.PartitionManager;
 import net.md_5.bungee.module.ModuleManager;
 import net.md_5.bungee.netty.PipelineUtils;
 import net.md_5.bungee.protocol.DefinedPacket;
@@ -167,10 +171,6 @@ public class BungeeCord extends ProxyServer
         registerChannel( "BungeeCord" );
     }
 
-    // MIMC Start
-    public final PartitionManager partitionManager = new PartitionManager();
-    // MIMC End
-
     public static BungeeCord getInstance()
     {
         return (BungeeCord) ProxyServer.getInstance();
@@ -221,7 +221,6 @@ public class BungeeCord extends ProxyServer
         getPluginManager().registerCommand( null, new CommandIP() );
         getPluginManager().registerCommand( null, new CommandBungee() );
         getPluginManager().registerCommand( null, new CommandPerms() );
-        getPluginManager().registerCommand( null, new CommandHop() );
 
         if ( !Boolean.getBoolean( "net.md_5.bungee.native.disable" ) )
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandHop.java b/proxy/src/main/java/net/md_5/bungee/command/CommandHop.java
deleted file mode 100644
index ebf138f1..00000000
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandHop.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package net.md_5.bungee.command;
-
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.CommandSender;
-import net.md_5.bungee.api.ProxyServer;
-import net.md_5.bungee.api.chat.ComponentBuilder;
-import net.md_5.bungee.api.config.ServerInfo;
-import net.md_5.bungee.api.connection.ProxiedPlayer;
-import net.md_5.bungee.api.plugin.Command;
-
-public class CommandHop extends Command {
-    public CommandHop() {
-        super("hop");
-    }
-
-    @Override
-    public void execute(CommandSender sender, String[] args) {
-        if (!(sender instanceof ProxiedPlayer)) {
-            sender.sendMessage(new ComponentBuilder("This command can only be run by a player!").color(ChatColor.RED).create());
-            return;
-        }
-        ProxiedPlayer player = (ProxiedPlayer) sender;
-
-        String serverName = player.getServer().getInfo().getName().equalsIgnoreCase("spawn")
-                ? "s1" : "spawn";
-        ServerInfo target = ProxyServer.getInstance().getServerInfo(serverName);
-        player.connect(target);
-    }
-}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index ede33cbd..5841cf63 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -67,7 +67,6 @@ public abstract class Configuration implements ProxyConfig
     private int compressionThreshold = 256;
     private boolean preventProxyConnections;
     private boolean forgeSupport = true; // Waterfall: default to enabled
-    private String worldFolder;
 
     @Synchronized("serversLock") // Waterfall
     public void load()
@@ -101,10 +100,6 @@ public abstract class Configuration implements ProxyConfig
         preventProxyConnections = adapter.getBoolean( "prevent_proxy_connections", preventProxyConnections );
         forgeSupport = adapter.getBoolean( "forge_support", forgeSupport );
 
-        // MIMC start
-        worldFolder = adapter.getString( "world_folder", worldFolder );
-        // MIMC end
-
         disabledCommands = new CaseInsensitiveSet( (Collection<String>) adapter.getList( "disabled_commands", Arrays.asList( "disabledcommandhere" ) ) );
 
         Preconditions.checkArgument( listeners != null && !listeners.isEmpty(), "No listeners defined." );
@@ -247,10 +242,4 @@ public abstract class Configuration implements ProxyConfig
         return changed;
     }
     // Waterfall end
-
-    // MIMC start
-    public String getWorldFolder() {
-        return worldFolder;
-    }
-    // MIMC end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 9b8e6170..1f8a2439 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -17,17 +17,13 @@ import io.github.waterfallmc.waterfall.event.ProxyDefineCommandsEvent; // Waterf
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.Unpooled;
-
 import java.io.DataInput;
 import java.util.ArrayList;
 import java.util.HashMap; // Waterfall
 import java.util.List;
 import java.util.Map;
 import java.util.Objects; // Waterfall
-import java.util.logging.Level;
-
 import lombok.RequiredArgsConstructor;
-import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.ServerConnection;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.Util;
@@ -47,7 +43,6 @@ import net.md_5.bungee.api.score.Score;
 import net.md_5.bungee.api.score.Scoreboard;
 import net.md_5.bungee.api.score.Team;
 import net.md_5.bungee.chat.ComponentSerializer;
-import net.md_5.bungee.mimc.Player;
 import net.md_5.bungee.netty.ChannelWrapper;
 import net.md_5.bungee.netty.PacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
@@ -138,160 +133,10 @@ public class DownstreamBridge extends PacketHandler
         return !server.isObsolete();
     }
 
-    private void joinGame(PacketWrapper packet) {
-        int entityId  = DefinedPacket.readVarInt( packet.buf );
-        //((BungeeCord)bungee).partitionManager.joinGame(entityId, con.getUniqueId().toString());
-        bungee.getLogger().log( Level.WARNING, String.format("JoinGame EntityId: %d UUID: %s", entityId, con.getUniqueId().toString()) );
-    }
-
-    private void updatePlayerRelativeLocation(PacketWrapper packet) {
-        double x = packet.buf.readDouble();
-        double y = packet.buf.readDouble();
-        double z = packet.buf.readDouble();
-        float yaw = packet.buf.readFloat();
-        float pitch = packet.buf.readFloat();
-        byte flags = packet.buf.readByte();
-        bungee.getLogger().log( Level.WARNING, String.format("PlayerPositionAndLook %s X: %.2f Y: %.2f Z: %.2f", con.getUniqueId(), x, y, z) );
-        Player player = ((BungeeCord)bungee).partitionManager.getOrCreatePlayer(con.getUniqueId().toString());
-        if (player != null) {
-            // flags can modify the meaning of x, y, z from absolute to relative position
-            player.x = (flags & 0x1) == 0x1 ? player.x + x : x;
-            player.y = (flags & 0x2) == 0x2 ? player.y + y : y;
-            player.z = (flags & 0x4) == 0x4 ? player.z + z : z;
-        }
-    }
-    private void updatePlayerLocation(PacketWrapper packet) {
-        double x = packet.buf.readDouble();
-        double y = packet.buf.readDouble();
-        double z = packet.buf.readDouble();
-        float yaw = packet.buf.readFloat();
-        float pitch = packet.buf.readFloat();
-        byte flags = packet.buf.readByte();
-        bungee.getLogger().log( Level.WARNING, String.format("PlayerPositionAndLook %s X: %.2f Y: %.2f Z: %.2f", con.getUniqueId(), x, y, z) );
-        Player player = ((BungeeCord)bungee).partitionManager.getOrCreatePlayer(con.getUniqueId().toString());
-        if (player != null) {
-            // flags can modify the meaning of x, y, z from absolute to relative position
-            player.x = (flags & 0x1) == 0x1 ? player.x + x : x;
-            player.y = (flags & 0x2) == 0x2 ? player.y + y : y;
-            player.z = (flags & 0x4) == 0x4 ? player.z + z : z;
-        }
-    }
-
     @Override
     public void handle(PacketWrapper packet) throws Exception
     {
         con.getEntityRewrite().rewriteClientbound( packet.buf, con.getServerEntityId(), con.getClientEntityId(), con.getPendingConnection().getVersion() );
-
-        int readerIndex = packet.buf.readerIndex();
-        int packetId = DefinedPacket.readVarInt( packet.buf );
-        // https://wiki.vg/Pre-release_protocol for current packetids
-        String packetName = null;
-        switch (packetId) {
-            case 0x00: packetName = "PacketPlayOutSpawnEntity"; break;
-            case 0x01: packetName = "PacketPlayOutSpawnEntityExperienceOrb"; break;
-            case 0x02: packetName = "PacketPlayOutSpawnGlobalEntity"; break;
-            case 0x03: packetName = "PacketPlayOutSpawnEntityLiving"; break;
-            case 0x04: packetName = "PacketPlayOutSpawnEntityPainting"; break;
-            case 0x05: packetName = "PacketPlayOutNamedEntitySpawn"; break;
-            //case 0x06: packetName = "PacketPlayOutAnimation"; break;
-            //case 0x07: packetName = "PacketPlayOutStatistics"; break;
-            //case 0x08: packetName = "PacketPlayOutBlockBreakAnimation"; break;
-            //case 0x09: packetName = "PacketPlayOutUpdateBlockEntity"; break;
-            //case 0x0A: packetName = "PacketPlayOutBlockAction"; break;
-            //case 0x0B: packetName = "PacketPlayOutBlockChange"; break;
-            //case 0x0C: packetName = "PacketPlayOutBossBar"; break;
-            //case 0x0D: packetName = "PacketPlayOutServerDifficulty"; break;
-            //case 0x0E: packetName = "PacketPlayOutChatMessage"; break;
-            //case 0x0F: packetName = "PacketPlayOutMultiBlockChange"; break;
-            //case 0x10: packetName = "PacketPlayOutTabComplete"; break;
-            //case 0x11: packetName = "PacketPlayOutDeclareCommands"; break;
-            //case 0x12: packetName = "PacketPlayOutConfirmTransaction"; break;
-            //case 0x13: packetName = "PacketPlayOutCloseWindow"; break;
-            //case 0x14: packetName = "PacketPlayOutWindowItems"; break;
-            //case 0x15: packetName = "PacketPlayOutWindowProperty"; break;
-            //case 0x16: packetName = "PacketPlayOutSetSlot"; break;
-            //case 0x17: packetName = "PacketPlayOutSetCooldown"; break;
-            //case 0x18: packetName = "PacketPlayOutPluginMessage"; break;
-            //case 0x19: packetName = "PacketPlayOutNamedSoundEffect"; break;
-            case 0x1A: packetName = "PacketPlayOutDisconnect"; break;
-            case 0x1B: packetName = "PacketPlayOutEntityStatus"; break;
-            //case 0x1C: packetName = "PacketPlayOutExplosion"; break;
-            //case 0x1D: packetName = "PacketPlayOutUnloadChunk"; break;
-            //case 0x1E: packetName = "PacketPlayOutChangeGameState"; break;
-            //case 0x1F: packetName = "PacketPlayOutOpenHorseWindow"; break;
-            //case 0x20: packetName = "PacketPlayOutKeepAlive"; break;
-            //case 0x21: packetName = "PacketPlayOutChunkData"; break;
-            //case 0x22: packetName = "PacketPlayOutEffect"; break;
-            //case 0x23: packetName = "PacketPlayOutParticle"; break;
-            //case 0x24: packetName = "PacketPlayOutUpdateLight"; break;
-            case 0x25:
-                packetName = "PacketPlayOutJoinGame";
-                joinGame(packet);
-                break;
-            //case 0x26: packetName = "PacketPlayOutMapData"; break;
-            //case 0x27: packetName = "PacketPlayOutTradeList"; break;
-            case 0x28: packetName = "PacketPlayOutRelEntityMove"; break;
-            case 0x29: packetName = "PacketPlayOutRelEntityMoveLook"; break;
-            case 0x2A: packetName = "PacketPlayOutEntityLook"; break;
-            case 0x2B: packetName = "PacketPlayOutEntity"; break;
-            case 0x2C: packetName = "PacketPlayOutVehicleMove"; break;
-            //case 0x2D: packetName = "PacketPlayOutOpenBook"; break;
-            //case 0x2E: packetName = "PacketPlayOutOpenWindow"; break;
-            //case 0x2F: packetName = "PacketPlayOutOpenSignEditor"; break;
-            //case 0x30: packetName = "PacketPlayOutCraftRecipeResponse"; break;
-            //case 0x31: packetName = "PacketPlayOutPlayerAbilities"; break;
-            //case 0x32: packetName = "PacketPlayOutCombatEvent"; break;
-            case 0x33: packetName = "PacketPlayOutPlayerInfo"; break;
-            //case 0x34: packetName = "PacketPlayOutFacePlayer"; break;
-            case 0x35:
-                packetName = "PacketPlayOutPlayerPositionAndLook";
-                updatePlayerLocation(packet);
-                break;
-            //case 0x36: packetName = "PacketPlayOutUnlockRecipes"; break;
-            //case 0x37: packetName = "PacketPlayOutEntityDestroy"; break;
-            //case 0x38: packetName = "PacketPlayOutRemoveEntityEffect"; break;
-            //case 0x39: packetName = "PacketPlayOutResourcePackSend"; break;
-            case 0x3A: packetName = "PacketPlayOutRespawn"; break;
-            //case 0x3B: packetName = "PacketPlayOutEntityHeadRotation"; break;
-            //case 0x3C: packetName = "PacketPlayOutSelectAdvancementTab"; break;
-            //case 0x3D: packetName = "PacketPlayOutWorldBorder"; break;
-            //case 0x3E: packetName = "PacketPlayOutCamera"; break;
-            //case 0x3F: packetName = "PacketPlayOutHeldItemChange"; break;
-            //case 0x40: packetName = "PacketPlayOutUpdateViewPosition"; break;
-            //case 0x41: packetName = "PacketPlayOutUpdateViewDistance"; break;
-            //case 0x42: packetName = "PacketPlayOutDisplayScoreboard"; break;
-            //case 0x43: packetName = "PacketPlayOutEntityMetadata"; break;
-            //case 0x44: packetName = "PacketPlayOutEntityDestroy"; break;
-            //case 0x45: packetName = "PacketPlayOutEntityVelocity"; break;
-            //case 0x46: packetName = "PacketPlayOutEntityEquipment"; break;
-            //case 0x47: packetName = "PacketPlayOutSetExperience"; break;
-            //case 0x48: packetName = "PacketPlayOutUpdateHealth"; break;
-            //case 0x49: packetName = "PacketPlayOutScoreboardObjective"; break;
-            //case 0x4A: packetName = "PacketPlayOutMount"; break;
-            //case 0x4B: packetName = "PacketPlayOutTeams"; break;
-            //case 0x4C: packetName = "PacketPlayOutUpdateScore"; break;
-            case 0x4D: packetName = "PacketPlayOutSpawnPosition"; break;
-            //case 0x4E: packetName = "PacketPlayOutTimeUpdate"; break;
-            //case 0x4F: packetName = "PacketPlayOutTitle"; break;
-            //case 0x50: packetName = "PacketPlayOutEntitySound"; break;
-            //case 0x51: packetName = "PacketPlayOutSoundEffect"; break;
-            //case 0x52: packetName = "PacketPlayOutStopSound"; break;
-            //case 0x53: packetName = "PacketPlayOutPlayerListHeaderAndFooter"; break;
-            //case 0x54: packetName = "PacketPlayOutNbtQueryResponse"; break;
-            //case 0x55: packetName = "PacketPlayOutCollect"; break;
-            case 0x56: packetName = "PacketPlayOutEntityTeleport"; break;
-            //case 0x57: packetName = "PacketPlayOutAdvancement"; break;
-            //case 0x58: packetName = "PacketPlayOutUpdateAttributes"; break;
-            //case 0x59: packetName = "PacketPlayOutEntityEffect"; break;
-            //case 0x5A: packetName = "PacketPlayOutDeclareRecipes"; break;
-            //case 0x5B: packetName = "PacketPlayOutTags"; break;
-        }
-        if (packetName != null) {
-            bungee.getLogger().log( Level.WARNING, String.format("Event 0x%02X: %s", packetId, packetName) );
-        }
-
-        packet.buf.readerIndex(readerIndex);
-
         con.sendPacket( packet );
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index ebe6d559..3a9dab68 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -3,9 +3,6 @@ package net.md_5.bungee.connection;
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.gson.Gson;
-
-import java.io.File;
-import java.io.IOException;
 import java.math.BigInteger;
 import java.net.InetSocketAddress;
 import java.net.URLEncoder;
@@ -41,9 +38,6 @@ import net.md_5.bungee.api.event.ServerConnectEvent;
 import net.md_5.bungee.chat.ComponentSerializer;
 import net.md_5.bungee.http.HttpClient;
 import net.md_5.bungee.jni.cipher.BungeeCipher;
-import net.md_5.bungee.mimc.PlayerLocation;
-import net.md_5.bungee.mimc.nbt.NbtFile;
-import net.md_5.bungee.mimc.nbt.NbtTree;
 import net.md_5.bungee.netty.ChannelWrapper;
 import net.md_5.bungee.netty.HandlerBoss;
 import net.md_5.bungee.netty.PacketHandler;
@@ -540,16 +534,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                             }
                             if ( server == null )
                             {
-                                // MIMC Start
-                                PlayerLocation lastPlayerLocation = PlayerLocation.load(bungee.config.getWorldFolder(), userCon.getUUID());
-                                String serverName = bungee.partitionManager.getServerAtLocation(lastPlayerLocation);
-                                // If the player has never connected, send him to the default server
-                                if (serverName == null) {
-                                    serverName = listener.getDefaultServer();
-                                }
-                                bungee.getLogger().log( Level.INFO, "MIMC forwarding " + userCon.getName() + " to " + serverName);
-                                server = bungee.getServerInfo( serverName );
-                                // MIMC End
+                                server = bungee.getServerInfo( listener.getDefaultServer() );
                             }
 
                             userCon.connect( server, null, true, ServerConnectEvent.Reason.JOIN_PROXY );
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/Dimension.java b/proxy/src/main/java/net/md_5/bungee/mimc/Dimension.java
deleted file mode 100644
index 78ddffa9..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/Dimension.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package net.md_5.bungee.mimc;
-
-public enum Dimension {
-    OVERWORLD,
-    NETHER,
-    END;
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/Partition.java b/proxy/src/main/java/net/md_5/bungee/mimc/Partition.java
deleted file mode 100644
index ea2d10e1..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/Partition.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package net.md_5.bungee.mimc;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class Partition {
-    private String serverName;
-    private Map<String, PlayerLocation> locationMap = new HashMap<>();
-
-    public static Partition createFor(String serverName, String uuid, PlayerLocation playerLocation) {
-        Partition partition = new Partition();
-        partition.add(uuid, playerLocation);
-        return partition;
-    }
-
-    public void add(String uuid, PlayerLocation playerLocation) {
-        locationMap.put(uuid, playerLocation);
-    }
-
-    public boolean contains(PlayerLocation playerLocation) {
-        return false;
-    }
-
-    public void migrate(String newServerName) {
-        this.serverName = newServerName;
-    }
-
-    public String getServerName() {
-        return serverName;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/PartitionManager.java b/proxy/src/main/java/net/md_5/bungee/mimc/PartitionManager.java
deleted file mode 100644
index 98698c1d..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/PartitionManager.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package net.md_5.bungee.mimc;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class PartitionManager {
-    private List<Partition> partitions = new ArrayList<>();
-
-    public String getServerAtLocation(PlayerLocation playerLocation) {
-        Partition partition = getPartitionAtLocation(playerLocation);
-        if (partition == null) {
-            return null;
-        }
-        return partition.getServerName();
-    }
-
-    public Partition getPartitionAtLocation(PlayerLocation playerLocation) {
-        for (int i = 0; i <partitions.size(); i++) {
-            Partition partition = partitions.get(i);
-            if (partition.contains(playerLocation)) {
-                return partition;
-            }
-        }
-        return null;
-    }
-
-    private List<Player> players = new ArrayList<>();
-    public Player getOrCreatePlayer(String uuid) {
-        Player p = getPlayer(uuid);
-        if (p == null) {
-            p = new Player();
-            p.uuid = uuid;
-            players.add(p);
-        }
-        return p;
-    }
-
-    public Player getPlayer(int entityId) {
-        for (int i = 0; i < players.size(); i++) {
-            Player p = players.get(i);
-            if (p.entityId == entityId) return p;
-        }
-        return null;
-    }
-    public Player getPlayer(String uuid) {
-        for (int i = 0; i < players.size(); i++) {
-            Player p = players.get(i);
-            if (p.uuid == uuid) return p;
-        }
-        return null;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/Player.java b/proxy/src/main/java/net/md_5/bungee/mimc/Player.java
deleted file mode 100644
index 85302865..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/Player.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package net.md_5.bungee.mimc;
-
-public class Player {
-    public int entityId;
-    public String uuid;
-    public double x, y, z;
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/PlayerLocation.java b/proxy/src/main/java/net/md_5/bungee/mimc/PlayerLocation.java
deleted file mode 100644
index 935f1a72..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/PlayerLocation.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package net.md_5.bungee.mimc;
-
-import net.md_5.bungee.mimc.nbt.NbtFile;
-import net.md_5.bungee.mimc.nbt.NbtTree;
-import net.md_5.bungee.mimc.nbt.TagNodeList;
-
-import java.io.File;
-import java.io.IOException;
-
-public class PlayerLocation {
-    private Dimension dimension;
-    private double x;
-    private double y;
-    private double z;
-
-    public PlayerLocation(Dimension dimension, double x, double y, double z) {
-        this.dimension = dimension;
-        this.x = x;
-        this.y = y;
-        this.z = z;
-    }
-
-    @Override
-    public String toString() {
-        return String.format("%s (X: %.2f Y: %.2f Z: %.2f)", dimension, x, y, z);
-    }
-
-    public static PlayerLocation load(String worldFolder, String uuid) {
-        try {
-            String playerdataFile = String.format("%s\\world\\playerdata\\%s.dat"
-                    , worldFolder.replaceAll("\\+$", "")
-                    , uuid);
-            if (new File(playerdataFile).exists()) {
-                NbtFile file = new NbtFile(playerdataFile);
-                NbtTree tree = NbtTree.readFrom(file.getInputStream());
-                return PlayerLocation.parse(tree);
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-    public static PlayerLocation parse(NbtTree playerData) {
-        Dimension dimension = parseDimension(playerData);
-        TagNodeList pos = playerData.root.getList("Pos");
-        return new PlayerLocation(
-                dimension,
-                pos.getDouble(0).value,
-                pos.getDouble(1).value,
-                pos.getDouble(2).value);
-    }
-    static Dimension parseDimension(NbtTree playerData) {
-        switch (playerData.root.getInteger("Dimension").value) {
-            case -1:
-                return Dimension.NETHER;
-            case 0:
-                return Dimension.OVERWORLD;
-            case 1:
-                return Dimension.END;
-        }
-        return null;
-    }
-}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/NbtFile.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/NbtFile.java
deleted file mode 100644
index 2e46ef49..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/NbtFile.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-import net.md_5.bungee.mimc.PlayerLocation;
-
-import java.io.*;
-import java.util.zip.GZIPInputStream;
-
-public class NbtFile {
-    private String fileName;
-
-    public NbtFile(String fileName) {
-        this.fileName = fileName;
-    }
-
-    public DataInputStream getInputStream() {
-        try {
-            InputStream inputStream = new FileInputStream(this.fileName);
-            GZIPInputStream gzipInputStream = new GZIPInputStream(inputStream);
-            byte[] bytes = readBytes(gzipInputStream);
-            gzipInputStream.close();
-            inputStream.close();
-            return new DataInputStream(new ByteArrayInputStream(bytes));
-        } catch (Exception e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
-
-    public static byte[] readBytes(InputStream inputStream) throws IOException {
-        byte[] b = new byte[1024];
-        ByteArrayOutputStream os = new ByteArrayOutputStream();
-        int c;
-        while ((c = inputStream.read(b)) != -1) {
-            os.write(b, 0, c);
-        }
-        return os.toByteArray();
-    }
-
-    public static void main(String[] args) {
-        NbtFile file = new NbtFile("P:\\vanilla\\Paper\\work\\test-server\\world\\playerdata\\55e94550-f0b0-3d5e-a616-931da896dcde.dat");
-        try {
-            NbtTree tree = NbtTree.readFrom(file.getInputStream());
-            PlayerLocation info = PlayerLocation.parse(tree);
-            System.out.println(info);
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/NbtTree.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/NbtTree.java
deleted file mode 100644
index cf97584c..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/NbtTree.java
+++ /dev/null
@@ -1,176 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-
-public class NbtTree {
-    public final TagNodeCompound root;
-    public final String rootName;
-
-    public NbtTree(String rootName, TagNodeCompound root) {
-        this.rootName = rootName;
-        this.root = root;
-    }
-
-    public static NbtTree readFrom(DataInputStream inputStream) throws IOException {
-        TagType type = readTagType(inputStream);
-        if (type == null || !type.equals(TagType.TAG_COMPOUND)) {
-            return null;
-        }
-        String rootName = readString(inputStream).value;
-        return new NbtTree(rootName, readCompound(inputStream));
-    }
-
-    static TagType readTagType(DataInputStream inputStream) throws IOException {
-        byte b = inputStream.readByte();
-        TagType[] types = TagType.values();
-        for (int i = 0; i < types.length; i++) {
-            TagType type = types[i];
-            if (type.value == b) return type;
-        }
-        return null;
-    }
-    static TagNodeCompound readCompound(DataInputStream inputStream) throws IOException {
-        TagNodeCompound val = new TagNodeCompound();
-        while (readTag(inputStream, val)) ;
-        return val;
-    }
-    static boolean readTag(DataInputStream inputStream, TagNodeCompound parent) throws IOException {
-        TagType type = readTagType(inputStream);
-        if (type != TagType.TAG_END) {
-            String name = readString(inputStream).value;
-            parent.set(name, readValue(type, inputStream));
-            return true;
-        }
-        return false;
-    }
-    static TagNode readValue(TagType type, DataInputStream inputStream) throws IOException {
-        switch (type) {
-            case TAG_END:
-                return null;
-
-            case TAG_BYTE:
-                return readByte(inputStream);
-
-            case TAG_SHORT:
-                return readShort(inputStream);
-
-            case TAG_INT:
-                return readInt(inputStream);
-
-            case TAG_LONG:
-                return readLong(inputStream);
-
-            case TAG_FLOAT:
-                return readFloat(inputStream);
-
-            case TAG_DOUBLE:
-                return readDouble(inputStream);
-
-            case TAG_BYTE_ARRAY:
-                return readByteArray(inputStream);
-
-            case TAG_STRING:
-                return readString(inputStream);
-
-            case TAG_LIST:
-                return readList(inputStream);
-
-            case TAG_COMPOUND:
-                return readCompound(inputStream);
-
-            case TAG_INT_ARRAY:
-                return readIntArray(inputStream);
-
-            case TAG_LONG_ARRAY:
-                return readLongArray(inputStream);
-
-            case TAG_SHORT_ARRAY:
-                return readShortArray(inputStream);
-        }
-
-        throw new IOException("Unknown tag type " + type);
-    }
-    static TagNodeString readString(DataInputStream inputStream) throws IOException {
-        short len = inputStream.readShort();
-        if (len < 0) {
-            throw new IOException("Negative length string");
-        }
-        byte[] bytes = new byte[len];
-        inputStream.read(bytes);
-        return new TagNodeString(new String(bytes, StandardCharsets.UTF_8));
-    }
-    static TagNodeByte readByte(DataInputStream inputStream) throws IOException {
-        return new TagNodeByte(inputStream.readByte());
-    }
-    static TagNodeShort readShort(DataInputStream inputStream) throws IOException {
-        return new TagNodeShort(inputStream.readShort());
-    }
-    static TagNodeInteger readInt(DataInputStream inputStream) throws IOException {
-        return new TagNodeInteger(inputStream.readInt());
-    }
-    static TagNodeLong readLong(DataInputStream inputStream) throws IOException {
-        return new TagNodeLong(inputStream.readLong());
-    }
-    static TagNodeFloat readFloat(DataInputStream inputStream) throws IOException {
-        return new TagNodeFloat(inputStream.readFloat());
-    }
-    static TagNodeDouble readDouble(DataInputStream inputStream) throws IOException {
-        return new TagNodeDouble(inputStream.readDouble());
-    }
-    static TagNodeByteArray readByteArray(DataInputStream inputStream) throws IOException {
-        int len = inputStream.readInt();
-        if (len < 0) {
-            throw new IOException("Negative length string");
-        }
-        byte[] bytes = new byte[len];
-        inputStream.read(bytes);
-        return new TagNodeByteArray(bytes);
-    }
-    static TagNodeIntegerArray readIntArray(DataInputStream inputStream) throws IOException {
-        int len = inputStream.readInt();
-        if (len < 0) {
-            throw new IOException("Negative length string");
-        }
-        int[] values = new int[len];
-        for (int i=0; i<len; i++) {
-            values[i] = inputStream.readInt();
-        }
-        return new TagNodeIntegerArray(values);
-    }
-    static TagNodeShortArray readShortArray(DataInputStream inputStream) throws IOException {
-        int len = inputStream.readInt();
-        if (len < 0) {
-            throw new IOException("Negative length string");
-        }
-        short[] values = new short[len];
-        for (int i=0; i<len; i++) {
-            values[i] = inputStream.readShort();
-        }
-        return new TagNodeShortArray(values);
-    }
-    static TagNodeLongArray readLongArray(DataInputStream inputStream) throws IOException {
-        int len = inputStream.readInt();
-        if (len < 0) {
-            throw new IOException("Negative length string");
-        }
-        long[] values = new long[len];
-        for (int i=0; i<len; i++) {
-            values[i] = inputStream.readLong();
-        }
-        return new TagNodeLongArray(values);
-    }
-    static TagNodeList readList(DataInputStream inputStream) throws IOException {
-        TagType type = readTagType(inputStream);
-        if (type == TagType.TAG_END) {
-            return new TagNodeList(TagType.TAG_BYTE);
-        }
-        TagNodeList list = new TagNodeList(type);
-        int len = inputStream.readInt();
-        for (int i=0;i<len;i++) {
-            list.nodes.add(readValue(type, inputStream));
-        }
-        return list;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNode.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNode.java
deleted file mode 100644
index 578b2e51..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNode.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public abstract class TagNode {
-
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeByte.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeByte.java
deleted file mode 100644
index 09156494..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeByte.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeByte extends TagNode {
-    public final byte value;
-
-    public TagNodeByte(byte value) {
-        this.value = value;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeByteArray.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeByteArray.java
deleted file mode 100644
index bfad02e6..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeByteArray.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeByteArray extends TagNode {
-    public final byte[] values;
-    public TagNodeByteArray(byte[] values) {
-        this.values = values;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeCompound.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeCompound.java
deleted file mode 100644
index f1584558..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeCompound.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class TagNodeCompound extends TagNode {
-    Map<String, TagNode> items = new HashMap<>();
-
-    public TagNode get(String key) {
-        return items.get(key);
-    }
-
-    public void set(String key, TagNode node) {
-        items.put(key, node);
-    }
-
-    public TagNodeString getString(String key) {
-        return (TagNodeString)get(key);
-    }
-    public TagNodeByte getByte(String key) {
-        return (TagNodeByte)get(key);
-    }
-    public TagNodeInteger getInteger(String key) {
-        return (TagNodeInteger)get(key);
-    }
-    public TagNodeShort getShort(String key) {
-        return (TagNodeShort)get(key);
-    }
-    public TagNodeLong getLong(String key) {
-        return (TagNodeLong)get(key);
-    }
-    public TagNodeFloat getFloat(String key) {
-        return (TagNodeFloat)get(key);
-    }
-    public TagNodeDouble getDouble(String key) {
-        return (TagNodeDouble)get(key);
-    }
-    public TagNodeByteArray getByteArray(String key) {
-        return (TagNodeByteArray)get(key);
-    }
-    public TagNodeList getList(String key) {
-        return (TagNodeList)get(key);
-    }
-    public TagNodeCompound getCompound(String key) {
-        return (TagNodeCompound)get(key);
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeDouble.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeDouble.java
deleted file mode 100644
index ed767696..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeDouble.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeDouble extends TagNode {
-    public final double value;
-    public TagNodeDouble(double value) {
-        this.value = value;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeFloat.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeFloat.java
deleted file mode 100644
index ee2162db..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeFloat.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeFloat extends TagNode {
-    public final float value;
-    public TagNodeFloat(float value) {
-        this.value = value;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeInteger.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeInteger.java
deleted file mode 100644
index 385faa9a..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeInteger.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeInteger extends TagNode {
-    public final int value;
-    public TagNodeInteger(int value) {
-        this.value = value;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeIntegerArray.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeIntegerArray.java
deleted file mode 100644
index 4a212cc1..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeIntegerArray.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeIntegerArray extends TagNode {
-    public final int[] values;
-    public TagNodeIntegerArray(int[] values) {
-        this.values = values;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeList.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeList.java
deleted file mode 100644
index 5747be64..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeList.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class TagNodeList extends TagNode {
-    public final TagType type;
-    public final List<TagNode> nodes;
-
-    public TagNodeList(TagType type) {
-        this.type = type;
-        this.nodes = new ArrayList<>();
-    }
-
-    public TagNode get(Integer i) {
-        return nodes.get(i);
-    }
-    public TagNodeString getString(Integer i) {
-        return (TagNodeString)get(i);
-    }
-    public TagNodeByte getByte(Integer i) {
-        return (TagNodeByte)get(i);
-    }
-    public TagNodeInteger getInteger(Integer i) {
-        return (TagNodeInteger)get(i);
-    }
-    public TagNodeShort getShort(Integer i) {
-        return (TagNodeShort)get(i);
-    }
-    public TagNodeLong getLong(Integer i) {
-        return (TagNodeLong)get(i);
-    }
-    public TagNodeFloat getFloat(Integer i) {
-        return (TagNodeFloat)get(i);
-    }
-    public TagNodeDouble getDouble(Integer i) {
-        return (TagNodeDouble)get(i);
-    }
-    public TagNodeByteArray getByteArray(Integer i) {
-        return (TagNodeByteArray)get(i);
-    }
-    public TagNodeList getList(Integer i) {
-        return (TagNodeList)get(i);
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeLong.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeLong.java
deleted file mode 100644
index 5b3e71c0..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeLong.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeLong extends TagNode {
-    public final long value;
-    public TagNodeLong(long value) {
-        this.value = value;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeLongArray.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeLongArray.java
deleted file mode 100644
index 648427a9..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeLongArray.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeLongArray extends TagNode {
-    public final long[] values;
-    public TagNodeLongArray(long[] values) {
-        this.values = values;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeShort.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeShort.java
deleted file mode 100644
index 15f7f533..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeShort.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeShort extends TagNode {
-    public final short value;
-    public TagNodeShort(short value) {
-        this.value = value;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeShortArray.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeShortArray.java
deleted file mode 100644
index c3d55380..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeShortArray.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeShortArray extends TagNode {
-    public final short[] values;
-    public TagNodeShortArray(short[] values) {
-        this.values = values;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeString.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeString.java
deleted file mode 100644
index d753138f..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagNodeString.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-public class TagNodeString extends TagNode {
-    public final String value;
-
-    public TagNodeString(String value) {
-        this.value = value;
-    }
-}
diff --git a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagType.java b/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagType.java
deleted file mode 100644
index 8697d60b..00000000
--- a/proxy/src/main/java/net/md_5/bungee/mimc/nbt/TagType.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package net.md_5.bungee.mimc.nbt;
-
-/// <summary>
-/// Defines the type of an NBT tag.
-/// </summary>
-public enum TagType
-{
-    /// <summary>
-    /// A null tag, used to terminate lists.
-    /// </summary>
-    TAG_END(0),
-
-    /// <summary>
-    /// A tag containing an 8-bit signed integer.
-    /// </summary>
-    TAG_BYTE(1),
-
-    /// <summary>
-    /// A tag containing a 16-bit signed integer.
-    /// </summary>
-    TAG_SHORT(2),
-
-    /// <summary>
-    /// A tag containing a 32-bit signed integer.
-    /// </summary>
-    TAG_INT(3),
-
-    /// <summary>
-    /// A tag containing a 64-bit signed integer.
-    /// </summary>
-    TAG_LONG(4),
-
-    /// <summary>
-    /// A tag containing a 32-bit (single precision) floating-point value.
-    /// </summary>
-    TAG_FLOAT(5),
-
-    /// <summary>
-    /// A tag containing a 64-bit (double precision) floating-point value.
-    /// </summary>
-    TAG_DOUBLE(6),
-
-    /// <summary>
-    /// A tag containing an array of unsigned 8-bit byte values.
-    /// </summary>
-    TAG_BYTE_ARRAY(7),
-
-    /// <summary>
-    /// A tag containing a string of text.
-    /// </summary>
-    TAG_STRING(8),
-
-    /// <summary>
-    /// A tag containing a sequential list of tags, where all tags of of the same type.
-    /// </summary>
-    TAG_LIST(9),
-
-    /// <summary>
-    /// A tag containing a key-value store of tags, where each tag can be of any type.
-    /// </summary>
-    TAG_COMPOUND(10),
-
-    /// <summary>
-    /// A tag containing an array of signed 32-bit values.
-    /// </summary>
-    TAG_INT_ARRAY(11),
-
-    /// <summary>
-    /// A tag containing an array of signed 64-bit values.
-    /// </summary>
-    TAG_LONG_ARRAY(12),
-
-    /// <summary>
-    /// A tag containing an array of signed 16-bit values.  NON-STANDARD NBT.
-    /// <remarks>This tag is included to support modded Minecraft and in anticipation that it may become standard in the future.</remarks>
-    /// </summary>
-    TAG_SHORT_ARRAY(13);
-
-    TagType(int value) {
-        this.value = (byte)value;
-    }
-    public final byte value;
-}
\ No newline at end of file
